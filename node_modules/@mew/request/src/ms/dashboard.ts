import {IRes, IResType, mewMsPost, mewRequest} from "../request";
import axios, {AxiosAdapter, AxiosInstance, AxiosRequestConfig, Method} from "axios";

export interface FindSqlProperty {
    cid: number
    dateFrom: number
    dateTo: number
}

export interface DepartmentFrequencyProperty {
    id: number
    count: string
    region: string
    rate: string
}

export interface LogByDay {
    day: string
    in: number
    out: number
}

export interface TopTenUsageTimes {
    toolId: number
    deviceId: string
    partDes: string
    number: string
}

export interface TopTenUsers {
    username: string
    count: string
}

export interface DeviceStatus {
    online: number
    total: number
}

export interface BmProperty {
    companyId: number;
    deviceId?: string;
    startTime?: number;
    endTime?: number;
    type:number;
}

export interface LogGarbageDataProperty{
    type: number
    villageId?: number;
    groupByVillageDevice?: boolean;
    startAt?: number;
    endAt?: number;
}

export function Dashboard(service: any, isDebugMode: boolean = false,isAesToStr = false) {
    return {
        // function
        cacheGetData: async () => {
            return await mewMsPost('/cache/get', {key: "localStatus", index: 0}, service, isDebugMode,isAesToStr)
        },

        /**
         * 获取工具借还情况,根据天
         */
        toolSituation: async function (json: any): Promise<IResType<LogByDay>> {
            return await mewMsPost('/statistics/logByDay', json, service, isDebugMode,isAesToStr)
        },

        /**
         * 获取工具使用前十
         * 工具使用排行榜top10
         * /log/getTopTenUsageTimes
         */
        toolTopTen: async function (json: any): Promise<IResType<TopTenUsageTimes>> {
            return await mewMsPost('/statistics/topTenUsageTimes', json, service, isDebugMode,isAesToStr)
        },

        /**
         * 获取工具使用后十
         * 工具使用排行榜top10
         * /log/getTopTenUsageTimes
         */
        toolBottomTen: async function (json: any): Promise<IResType<TopTenUsageTimes>> {
            return await mewMsPost('/statistics/bottomTenUsageTimes', json, service, isDebugMode,isAesToStr)
        },

        /**
         * 部门使用情况
         */
        departmentFrequency: async function (json: any): Promise<IResType<DepartmentFrequencyProperty>> {
            return await mewMsPost('/statistics/departmentFrequency', json, service, isDebugMode,isAesToStr)
        },

        /**
         * 班组使用情况
         */
        teamFrequency: async function (json: any): Promise<IResType<DepartmentFrequencyProperty>> {
            return await mewMsPost('/statistics/departmentFrequency', json, service, isDebugMode,isAesToStr)
        },

        /**
         * 班组使用情况
         */
        topTenUsers: async function (json: any): Promise<IResType<TopTenUsers>> {
            return await mewMsPost('/statistics/topTenUsers', json, service, isDebugMode,isAesToStr)
        },

        /**
         * 设备状态
         */
        deviceStatus: async function (json: any): Promise<IRes<DeviceStatus>> {
            return await mewRequest('/statistics/deviceStatus', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         * 基础数据,不传数据,默认最近30天
         * 1.回收垃圾总量
         * 2.发放积分
         * 3.投递次数
         * 4.清运次数
         * 5.小区数量
         * 6.用户数量
         * 7.今日回收重量
         * 8.今日使用频次
         */
        baseData: async function (json: LogGarbageDataProperty): Promise<IRes<DeviceStatus>> {
            return await mewRequest('/statistics/baseData', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         * 垃圾分类投递重量数据
         */
        garbageWightData: async function (json: LogGarbageDataProperty): Promise<IRes<DeviceStatus>> {
            return await mewRequest('/statistics/garbageWightData', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         * 垃圾比例
         */
        garbageWeightProportion: async function (json: LogGarbageDataProperty): Promise<IRes<DeviceStatus>> {
            return await mewRequest('/statistics/garbageWeightProportion', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         * 垃圾四分类
         */
        garbageWeightPrimary: async function (json: LogGarbageDataProperty): Promise<IRes<DeviceStatus>> {
            return await mewRequest('/statistics/garbageWeightPrimary', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         * 垃圾比例,按照设备排名
         */
        garbageWeightOrderByDevice: async function (json: LogGarbageDataProperty): Promise<IRes<DeviceStatus>> {
            return await mewRequest('/statistics/garbageWeightOrderByDevice', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         * 大屏数据
         */
        bmData: async function (json: BmProperty): Promise<IRes> {
            return await mewRequest('/statistics/bmData', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         *  获取缓存
         */
        cacheGet: async function (json: any): Promise<IRes> {
            return await mewRequest('/cache/get', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         *  获取缓存
         */
        cacheGetByKey: async function (json: any): Promise<IRes> {
            return await mewRequest('/cache/getByKey', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         *  获取版本
         */
        getVersion: async function (json: any): Promise<IRes> {
            return await mewRequest('/version', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         *   设置缓存
         */
        cacheSet: async function (json: any): Promise<IRes> {
            return await mewRequest('/cache/set', json, 'POST', service, isDebugMode,isAesToStr)
        },

        /**
         * 大屏数据
         */
        lackToolList: async function (json: BmProperty): Promise<IRes> {
            return await mewRequest('/statistics/lackToolList', json, 'POST', service, isDebugMode,isAesToStr)
        }
    }
}
