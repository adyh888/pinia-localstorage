export declare const isDebugMode = true;
export declare let ac: {
    email_template: import("./request").Request<import("./ms/lc").EmailTemplate, import("./ms/lc").EmailTemplateInsertProperty, import("./ms/lc").EmailTemplateDeleteProperty, import("./ms/lc").EmailTemplateUpdateProperty, import("./ms/lc").EmailTemplateSelectProperty>;
    process: import("./request").Request<import("./ms/ac").Process, import("./ms/ac").ProcessInsertProperty, import("./ms/ac").ProcessDeleteProperty, import("./ms/ac").ProcessUpdateProperty, import("./ms/ac").ProcessSelectProperty>;
    process_type: import("./request").Request<import("./ms/ac").ProcessType, import("./ms/ac").ProcessTypeInsertProperty, import("./ms/ac").ProcessTypeDeleteProperty, import("./ms/ac").ProcessTypeUpdateProperty, import("./ms/ac").ProcessTypeSelectProperty>;
    file: import("./request").Request<import("./ms/ac").File, import("./ms/ac").FileInsertProperty, import("./ms/ac").FileDeleteProperty, import("./ms/ac").FileUpdateProperty, import("./ms/ac").FileSelectProperty>;
    setting: import("./request").Request<import("./ms/ac").Setting, import("./ms/ac").SettingInsertProperty, import("./ms/ac").SettingDeleteProperty, import("./ms/ac").SettingUpdateProperty, import("./ms/ac").SettingSelectProperty>;
    carousel: import("./request").Request<import("./ms/ac").Carousel, import("./ms/ac").CarouselInsertProperty, import("./ms/ac").CarouselDeleteProperty, import("./ms/ac").CarouselUpdateProperty, import("./ms/ac").CarouselSelectProperty>;
    notice: import("./request").Request<import("./ms/ac").Notice, import("./ms/ac").NoticeInsertProperty, import("./ms/ac").NoticeDeleteProperty, import("./ms/ac").NoticeUpdateProperty, import("./ms/ac").NoticeSelectProperty>;
    process_custom: import("./request").Request<import("./ms/ac").ProcessCustom, import("./ms/ac").ProcessCustomInsertProperty, import("./ms/ac").ProcessCustomDeleteProperty, import("./ms/ac").ProcessCustomUpdateProperty, import("./ms/ac").ProcessCustomSelectProperty>;
    process_custom_item: import("./request").Request<import("./ms/ac").ProcessCustomItem, import("./ms/ac").ProcessCustomItemInsertProperty, import("./ms/ac").ProcessCustomItemDeleteProperty, import("./ms/ac").ProcessCustomItemUpdateProperty, import("./ms/ac").ProcessCustomItemSelectProperty>;
    process_custom_condition: import("./request").Request<import("./ms/ac").ProcessCustomCondition, import("./ms/ac").ProcessCustomConditionInsertProperty, import("./ms/ac").ProcessCustomConditionDeleteProperty, import("./ms/ac").ProcessCustomConditionUpdateProperty, import("./ms/ac").ProcessCustomConditionSelectProperty>;
    i18n: import("./request").Request<import("./ms/ac").I18n, import("./ms/ac").I18nInsertProperty, import("./ms/ac").I18nDeleteProperty, import("./ms/ac").I18nUpdateProperty, import("./ms/ac").I18nSelectProperty>;
    task: import("./request").Request<import("./ms/ac").Task, import("./ms/ac").TaskInsertProperty, import("./ms/ac").TaskDeleteProperty, import("./ms/ac").TaskUpdateProperty, import("./ms/ac").TaskSelectProperty>;
    alarm: import("./request").Request<import("./ms/ac").Alarm, import("./ms/ac").AlarmInsertProperty, import("./ms/ac").AlarmDeleteProperty, import("./ms/ac").AlarmUpdateProperty, import("./ms/ac").AlarmSelectProperty>;
    feedback: import("./request").Request<import("./ms/ac").Feedback, import("./ms/ac").FeedbackInsertProperty, import("./ms/ac").FeedbackDeleteProperty, import("./ms/ac").FeedbackUpdateProperty, import("./ms/ac").FeedbackSelectProperty>;
    getVersion: () => Promise<{
        code: number;
        msg: string;
        data: string;
    }>;
    processNext: (json: import("./ms/ac").ProcessNextProperty) => Promise<any>;
    noticeRead: (json: import("./ms/ac").NoticeReadProperty) => Promise<any>;
    getNewList: () => Promise<any>;
    getNewDetail: (json: import("./ms/ac").NewDetailProperty) => Promise<any>;
    noticeStatistical: (json: import("./ms/ac").NoticeSelectProperty) => Promise<any>;
    processStart: (json: import("./ms/ac").ProcessStartProperty) => Promise<any>;
    messageNotice: (json: import("./ms/ac").MessageNoticeProperty) => Promise<any>;
    carouselDeleteFile: (json: import("./ms/ac").CarouselDeleteFileProperty) => Promise<any>;
    feedbackInsertBatch: (json: import("./ms/ac").InsertBatchProperty) => Promise<any>;
    alarmInsertBatch: (json: import("./ms/ac").InsertBatchProperty) => Promise<any>;
    i18nInsertBatch: (json: import("./ms/ac").InsertBatchProperty) => Promise<any>;
    apkGetNotice: (json: {
        deviceId: string;
    }) => Promise<any>;
    getTaskNumber: (json: import("./ms/ac").InsertBatchProperty) => Promise<any>;
    processTypeUpdateBatch: (json: {
        itemArr: any[];
    }) => Promise<any>;
    commonExport: (json: {
        callback: string;
        selectParams: any;
        tableInfo: any[];
        title: string;
    }) => Promise<any>;
    processCustomItemInsertBatch: (json: import("./ms/ac").ProcessCustomItemInsertBatchProperty) => Promise<any>;
    processCustomItemUpdateBatch: (json: {
        itemArr: any[];
    }) => Promise<any>;
    generateUUID: (json: {}) => Promise<any>;
    sendEmail: (json: import("./ms/lc").SendEmailProperty) => Promise<any>;
    sendEmailCustom: (json: import("./ms/lc").SendEmailCustomProperty) => Promise<any>;
    generateLanguage: (json: {}) => Promise<any>;
    deleteUselessDeviceUser: (json: {}) => Promise<any>;
    delCache: (json: {
        key: string;
    }) => Promise<any>;
};
