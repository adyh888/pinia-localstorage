"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mewRequest = exports.mewMsRequest = exports.mewMsRemove = exports.mewMsDelete = exports.mewMsPut = exports.mewMsGet = exports.mewMsPost = exports.Request = void 0;
var tslib_1 = require("tslib");
var CryptoJS = tslib_1.__importStar(require("crypto-js"));
/**
 * 请求用类来集成
 */
var Request = /** @class */ (function () {
    function Request(uri, service, isDebugMode, isAesToStr, timeout) {
        if (isDebugMode === void 0) { isDebugMode = false; }
        if (isAesToStr === void 0) { isAesToStr = false; }
        if (timeout === void 0) { timeout = 10000; }
        this._uri = uri;
        this._service = service;
        this._isDebugMode = isDebugMode;
        this._timeout = timeout;
        this._isAesToStr = isAesToStr;
        // // 请求拦截器
        // this._service.interceptors.request.use(
        //   (config) => {
        //       return config
        //   },
        //   (err) => {
        //       return err
        //   }
        // )
        // 响应拦截器
        this._service.interceptors.response.use(function (response) {
            return response;
        }, function (err) {
            if (err.response && err.response.status === 401) {
                return {
                    data: {
                        code: 401,
                        error: "验证失效，请重新登录",
                        data: []
                    }
                };
            }
            else if (err.response && err.response.status === 403) {
                return {
                    data: {
                        code: 403,
                        error: "请求被拒绝",
                        data: []
                    }
                };
            }
            else if (err.response && err.response.status === 400) {
                return {
                    data: {
                        code: 400,
                        error: "无法解析格式",
                        data: []
                    }
                };
            }
            else if (err.response && err.response.status === 500) {
                return {
                    data: {
                        code: 500,
                        error: "服务器异常",
                        data: []
                    }
                };
            }
            else if (err.response && err.response.status === 502) {
                return {
                    data: {
                        code: 502,
                        error: "服务器无响应",
                        data: []
                    }
                };
            }
            else if (err.response && err.response.status === 503) {
                return {
                    data: {
                        code: 503,
                        error: "服务器无法使用",
                        data: []
                    }
                };
            }
            else if (err.code === "ECONNABORTED" && err.message.includes('timeout')) {
                return {
                    data: {
                        code: '10101010',
                        error: "请求超时",
                        data: []
                    }
                };
            }
            else {
                return Promise.reject(err);
            }
        });
        // 实例
        // this._service.interceptors.request.use(
        //   service.interceptors?.requestInterceptor,
        //   service.interceptors?.requestInterceptorCatch
        // )
        //
        // this._service.interceptors.response.use(
        //   service.interceptors?.responseInterceptor,
        //   service.interceptors?.responseInterceptorCatch
        // )
    }
    Request.prototype.insert = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mewMsPost(this._uri + '/insert', params, this._service, this._isDebugMode, this._isAesToStr, this._timeout)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Request.prototype.delete = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mewMsDelete(this._uri + '/delete', params, this._service, this._isDebugMode, this._isAesToStr, this._timeout)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * 用于dingtalk小程序
     * remove 相当于 post /xc/xxx/delete
     * @param params
     */
    Request.prototype.remove = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mewMsRemove(this._uri + '/delete', params, this._service, this._isDebugMode, this._isAesToStr, this._timeout)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Request.prototype.update = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mewMsPost(this._uri + '/update', params, this._service, this._isDebugMode, this._isAesToStr, this._timeout)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Request.prototype.find = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mewMsPost(this._uri + '/find', params, this._service, this._isDebugMode, this._isAesToStr, this._timeout)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Request.prototype.select = function (params) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, mewMsPost(this._uri + '/select', params, this._service, this._isDebugMode, this._isAesToStr, this._timeout)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Request;
}());
exports.Request = Request;
/**
 * 米鸥科技封装-微服务Post请求
 * @param url
 * @param params
 * @param service
 * @param isDebugMode
 * @param timeout
 * @param isAesToStr
 */
function mewMsPost(url, params, service, isDebugMode, isAesToStr, timeout) {
    if (params === void 0) { params = {}; }
    if (isDebugMode === void 0) { isDebugMode = false; }
    if (isAesToStr === void 0) { isAesToStr = false; }
    if (timeout === void 0) { timeout = 10000; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mewMsRequest(url, params, 'POST', service, isDebugMode, isAesToStr, timeout)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.mewMsPost = mewMsPost;
/**
 * 米鸥科技封装-微服务Get请求
 * @param url
 * @param params
 * @param service
 * @param isDebugMode
 * @param timeout
 * @param isAesToStr
 */
function mewMsGet(url, params, service, isDebugMode, timeout, isAesToStr) {
    if (params === void 0) { params = {}; }
    if (isDebugMode === void 0) { isDebugMode = false; }
    if (timeout === void 0) { timeout = 1000; }
    if (isAesToStr === void 0) { isAesToStr = false; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mewMsRequest(url, params, 'GET', service, isDebugMode, isAesToStr, timeout)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.mewMsGet = mewMsGet;
/**
 * 米鸥科技封装-微服务Put请求
 * @param url
 * @param params
 * @param service
 * @param isDebugMode
 * @param timeout
 * @param isAesToStr
 */
function mewMsPut(url, params, service, isDebugMode, timeout, isAesToStr) {
    if (params === void 0) { params = {}; }
    if (isDebugMode === void 0) { isDebugMode = false; }
    if (timeout === void 0) { timeout = 10000; }
    if (isAesToStr === void 0) { isAesToStr = false; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mewMsRequest(url, params, 'PUT', service, isDebugMode, isAesToStr, timeout)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.mewMsPut = mewMsPut;
/**
 * 米鸥科技封装-微服务Delete请求
 * @param url
 * @param params
 * @param service
 * @param isDebugMode
 * @param timeout
 * @param isAesToStr
 */
function mewMsDelete(url, params, service, isDebugMode, isAesToStr, timeout) {
    if (params === void 0) { params = {}; }
    if (isDebugMode === void 0) { isDebugMode = false; }
    if (isAesToStr === void 0) { isAesToStr = false; }
    if (timeout === void 0) { timeout = 10000; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mewMsRequest(url, params, 'POST', service, isDebugMode, isAesToStr, timeout)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.mewMsDelete = mewMsDelete;
/**
 * 米鸥科技封装-微服务Delete请求-用于dingtalk小程序-相当于 post /xc/xxx/delete
 * @param url
 * @param params
 * @param service
 * @param isDebugMode
 * @param timeout
 * @param isAesToStr
 */
function mewMsRemove(url, params, service, isDebugMode, isAesToStr, timeout) {
    if (params === void 0) { params = {}; }
    if (isDebugMode === void 0) { isDebugMode = false; }
    if (isAesToStr === void 0) { isAesToStr = false; }
    if (timeout === void 0) { timeout = 10000; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mewMsRequest(url, params, 'POST', service, isDebugMode, isAesToStr, timeout)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.mewMsRemove = mewMsRemove;
/**
 * 米鸥科技封装-微服务Request请求
 * @param url
 * @param params
 * @param method
 * @param service
 * @param isDebugMode
 * @param timeout
 * @param isAesToStr
 */
function mewMsRequest(url, params, method, service, isDebugMode, isAesToStr, timeout) {
    if (params === void 0) { params = {}; }
    if (method === void 0) { method = 'POST'; }
    if (isDebugMode === void 0) { isDebugMode = false; }
    if (isAesToStr === void 0) { isAesToStr = false; }
    if (timeout === void 0) { timeout = 10000; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var res;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mewRequest(url, params, method, service, isDebugMode, isAesToStr, timeout)];
                case 1:
                    res = _a.sent();
                    if (res && res.code === 0) {
                        return [2 /*return*/, res];
                    }
                    else {
                        throw new Error(res === null || res === void 0 ? void 0 : res.error);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.mewMsRequest = mewMsRequest;
/**
 * 米鸥科技封装Request请求
 * @param url BaseURL+uri
 * @param params
 * @param method
 * @param service
 * @param timeout
 * @param isDebugMode true:调试模式 false:正常模式(默认)
 * @param isAesToStr
 */
function mewRequest(url, params, method, service, isDebugMode, isAesToStr, timeout) {
    if (params === void 0) { params = {}; }
    if (method === void 0) { method = 'POST'; }
    if (isDebugMode === void 0) { isDebugMode = false; }
    if (isAesToStr === void 0) { isAesToStr = false; }
    if (timeout === void 0) { timeout = 10000; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var cryptoJSStr, dataStr, cryptoData, config, res, error_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    cryptoJSStr = {};
                    // console.log("request传参",params);
                    if (isAesToStr === true) {
                        if (Object.keys(params).length) {
                            dataStr = JSON.stringify(params);
                            cryptoData = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(dataStr), CryptoJS.enc.Utf8.parse('asdfghjklzxcvbnn'), {
                                mode: CryptoJS.mode.ECB,
                                padding: CryptoJS.pad.Pkcs7
                            });
                            cryptoJSStr = { data: cryptoData.toString() };
                        }
                        else {
                            cryptoJSStr = {};
                        }
                    }
                    else {
                        cryptoJSStr = params;
                    }
                    config = {
                        url: url,
                        method: method,
                        data: cryptoJSStr,
                        timeout: timeout
                    };
                    if (isDebugMode)
                        console.log(config);
                    return [4 /*yield*/, service.request(config)];
                case 1:
                    res = _a.sent();
                    if (isDebugMode)
                        console.log(url, res);
                    return [2 /*return*/, res.data];
                case 2:
                    error_1 = _a.sent();
                    console.log(service.defaults.baseURL + url, JSON.stringify(params), error_1);
                    throw new Error(error_1);
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.mewRequest = mewRequest;
