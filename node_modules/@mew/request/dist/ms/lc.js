"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lc = void 0;
var tslib_1 = require("tslib");
var request_1 = require("../request");
function Lc(service, isDebugMode, isAesToStr) {
    var _this = this;
    if (isDebugMode === void 0) { isDebugMode = false; }
    if (isAesToStr === void 0) { isAesToStr = false; }
    return {
        log_clean: new request_1.Request('/lc/log_clean', service, isDebugMode, isAesToStr),
        log_rent: new request_1.Request('/lc/log_rent', service, isDebugMode, isAesToStr),
        log_modification_integral: new request_1.Request('/lc/log_modification_integral', service, isDebugMode, isAesToStr),
        log_measurement: new request_1.Request('/lc/log_measurement', service, isDebugMode, isAesToStr),
        log_scrap: new request_1.Request('/lc/log_scrap', service, isDebugMode, isAesToStr),
        log_test: new request_1.Request('/lc/log_test', service, isDebugMode, isAesToStr),
        log_process: new request_1.Request('/lc/log_process', service, isDebugMode, isAesToStr),
        log_process_main: new request_1.Request('/lc/log_process_main', service, isDebugMode, isAesToStr),
        log_evaluation: new request_1.Request('/lc/log_evaluation', service, isDebugMode, isAesToStr),
        log_error: new request_1.Request('/lc/log_error', service, isDebugMode),
        log_ssh: new request_1.Request('/lc/log_ssh', service, isDebugMode),
        log_table_modify: new request_1.Request('/lc/log_table_modify', service, isDebugMode),
        // class
        log: new request_1.Request('/lc/log', service, isDebugMode, isAesToStr),
        log_feedback: new request_1.Request('/lc/log_feedback', service, isDebugMode, isAesToStr),
        log_alarm: new request_1.Request('/lc/log_alarm', service, isDebugMode, isAesToStr),
        log_user_login: new request_1.Request('/lc/log_user_login', service, isDebugMode, isAesToStr),
        log_shelf: new request_1.Request('/lc/log_shelf', service, isDebugMode, isAesToStr),
        log_charge: new request_1.Request('/lc/log_charge', service, isDebugMode, isAesToStr),
        log_apply: new request_1.Request('/lc/log_apply', service, isDebugMode, isAesToStr),
        log_lock: new request_1.Request('/lc/log_lock', service, isDebugMode, isAesToStr),
        log_epc_goods: new request_1.Request('/lc/log_device_login', service, isDebugMode, isAesToStr),
        log_device_login: new request_1.Request('/lc/Request', service, isDebugMode, isAesToStr),
        log_purchase: new request_1.Request('/lc/log_purchase', service, isDebugMode, isAesToStr),
        log_purchase_details: new request_1.Request('/lc/log_purchase_details', service, isDebugMode, isAesToStr),
        log_device_transfer: new request_1.Request('/lc/log_device_transfer', service, isDebugMode, isAesToStr),
        log_overhaul: new request_1.Request('/lc/log_overhaul', service, isDebugMode, isAesToStr),
        log_periodical_examination: new request_1.Request('/lc/log_periodical_examination', service, isDebugMode, isAesToStr),
        log_patrol_inspection: new request_1.Request('/lc/log_patrol_inspection', service, isDebugMode, isAesToStr),
        log_pre_inspection: new request_1.Request('/lc/log_pre_inspection', service, isDebugMode, isAesToStr),
        log_verification: new request_1.Request('/lc/log_pre_inspection', service, isDebugMode, isAesToStr),
        log_sdxx_file: new request_1.Request('/lc/log_sdxx_file', service, isDebugMode, isAesToStr),
        log_IO: new request_1.Request('/lc/log_io', service, isDebugMode, isAesToStr),
        log_goods: new request_1.Request('/lc/log_goods', service, isDebugMode, isAesToStr),
        log_rfid_shelf: new request_1.Request('/lc/log_rfid_shelf', service, isDebugMode, isAesToStr),
        log_stock: new request_1.Request('/lc/log_stock', service, isDebugMode, isAesToStr),
        log_meter: new request_1.Request('/lc/log_meter', service, isDebugMode, isAesToStr),
        log_receive: new request_1.Request('/lc/log_receive', service, isDebugMode, isAesToStr),
        log_garbage: new request_1.Request('/lc/log_garbage', service, isDebugMode, isAesToStr),
        log_garbage_details: new request_1.Request('/lc/log_garbage_details', service, isDebugMode, isAesToStr),
        // function
        getVersion: function () { return request_1.mewRequest('/lc/select/version', {}, 'POST', service, isDebugMode, isAesToStr); },
        /**
         * 工具借还记录接口
         * @param params
         */
        toolStatusChange: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request_1.mewRequest('/lc/log/toolStatus/change', params, 'POST', service, isDebugMode, isAesToStr)];
                    case 1:
                        res = _a.sent();
                        console.log(165, res);
                        return [2 /*return*/, res];
                }
            });
        }); },
        /**
         * 插入多条报修记录
         * @param params
         */
        logFeedbackArrInsert: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var url;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/lc/log_feedback/insert/toolArr';
                        return [4 /*yield*/, request_1.mewRequest(url, params, 'POST', service, isDebugMode, isAesToStr)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); },
        logRentInsertBatch: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var url;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/lc/log_rent/insert/batch';
                        return [4 /*yield*/, request_1.mewRequest(url, params, 'POST', service, isDebugMode, isAesToStr)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); },
        logProcessStatistics: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var url;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/lc/log_process/statistics';
                        return [4 /*yield*/, request_1.mewRequest(url, params, 'POST', service, isDebugMode, isAesToStr)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); },
        logProcessViewSelect: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var url;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/lc/log_process_view/select';
                        return [4 /*yield*/, request_1.mewRequest(url, params, 'POST', service, isDebugMode, isAesToStr)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); },
        logInsertBatch: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request_1.mewRequest('/lc/log/insert/batch', params, 'POST', service, isDebugMode, isAesToStr)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); },
        logInsertBatch2: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, request_1.mewRequest('/lc/log/insert/batch2', params, 'POST', service, isDebugMode, isAesToStr)];
        }); }); },
        logFeedbackGoods: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, request_1.mewRequest('/lc/log_feedback/select/goods', params, 'POST', service, isDebugMode, isAesToStr)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); },
        logProcessComprehensiveFind: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, request_1.mewRequest('/lc/log_process/comprehensiveFind', params, 'POST', service, isDebugMode, isAesToStr)];
        }); }); },
        logFeedbackUpdateBatch: function (json) { return request_1.mewRequest('/lc/log_feedback/update/batch', json, 'POST', service, isDebugMode, isAesToStr); },
        getStepTotalPrice: function (json) { return request_1.mewRequest('/lc/log_rent/getStepTotalPrice', json, 'POST', service, isDebugMode, isAesToStr); },
        getTopTenUsageTimes: function (json) { return request_1.mewRequest('/lc/log/getTopTenUsageTimes', json, 'POST', service, isDebugMode, isAesToStr); },
        getUsageTimes: function (json) { return request_1.mewRequest('/lc/log/usageTimes', json, 'POST', service, isDebugMode, isAesToStr); },
        logFixData: function (json) { return request_1.mewRequest('/lc/log/fixData', json, 'POST', service, isDebugMode, isAesToStr); },
    };
}
exports.Lc = Lc;
