"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dc = exports.LocationEmptyCabinetProperty = exports.PortType = exports.IoModuleType = exports.ScreenType = exports.CabinetType = exports.KeyBoard = exports.SensorType = exports.MachineType = exports.TerminalType = exports.DeviceMode = exports.Version = exports.NetType = void 0;
var request_1 = require("../request");
var NetType;
(function (NetType) {
    NetType["internet"] = "internet";
    NetType["intranet"] = "intranet"; // 内网
})(NetType = exports.NetType || (exports.NetType = {}));
var Version;
(function (Version) {
    Version["v33"] = "v33";
    Version["v4"] = "v4";
    Version["v501"] = "v501";
    Version["v502"] = "v502";
    Version["v510"] = "v510";
})(Version = exports.Version || (exports.Version = {}));
// 设备类型 【gm,rfid,cd,ck】
var DeviceMode;
(function (DeviceMode) {
    DeviceMode["gm"] = "gm";
    DeviceMode["rfid"] = "rfid";
    DeviceMode["cd"] = "cd";
    DeviceMode["ck"] = "ck";
    DeviceMode["bjk"] = "bjk";
    DeviceMode["sale"] = "sale";
})(DeviceMode = exports.DeviceMode || (exports.DeviceMode = {}));
// 终端类型
var TerminalType;
(function (TerminalType) {
    TerminalType["server"] = "server";
    TerminalType["readonly"] = "readonly";
    TerminalType["login"] = "login";
    /// 读取平台
    TerminalType["readPlatform"] = "readPlatform";
})(TerminalType = exports.TerminalType || (exports.TerminalType = {}));
var MachineType;
(function (MachineType) {
    MachineType["none"] = "none";
    MachineType["x64"] = "none";
    MachineType["arm"] = "none";
})(MachineType = exports.MachineType || (exports.MachineType = {}));
var SensorType;
(function (SensorType) {
    SensorType["card"] = "card";
    SensorType["finger"] = "finger";
    SensorType["face"] = "face";
    SensorType["photosensitive"] = "photosensitive";
    SensorType["rfid"] = "rfid";
    SensorType["charge"] = "charge";
    SensorType["io"] = "io";
    SensorType["weight"] = "weight";
})(SensorType = exports.SensorType || (exports.SensorType = {}));
var KeyBoard;
(function (KeyBoard) {
    KeyBoard["default"] = "default";
    KeyBoard["diy"] = "diy";
})(KeyBoard = exports.KeyBoard || (exports.KeyBoard = {}));
var CabinetType;
(function (CabinetType) {
    CabinetType["drawer"] = "drawer";
    CabinetType["cabinet"] = "cabinet";
    CabinetType["ck"] = "ck";
    CabinetType["mixin"] = "mixin";
    CabinetType["gmcw"] = "gmcw";
    CabinetType["charge"] = "charge";
    CabinetType["sell"] = "sell";
    CabinetType["trolleyCase"] = "trolleyCase";
    CabinetType["keysCabinet"] = "keysCabinet";
    CabinetType["jdCabinet"] = "jdCabinet"; //京东资料柜
})(CabinetType = exports.CabinetType || (exports.CabinetType = {}));
var ScreenType;
(function (ScreenType) {
    ScreenType["none"] = "none";
    ScreenType["android_21_5"] = "android_21_5";
    ScreenType["android_15_6"] = "android_15_6";
    ScreenType["android_11_6"] = "android_11_6";
    ScreenType["android_10_1"] = "android_10_1";
    ScreenType["common_7"] = "common_7";
})(ScreenType = exports.ScreenType || (exports.ScreenType = {}));
var IoModuleType;
(function (IoModuleType) {
    IoModuleType["di"] = "di";
    IoModuleType["do"] = "do";
    IoModuleType["dio"] = "dio";
})(IoModuleType = exports.IoModuleType || (exports.IoModuleType = {}));
var PortType;
(function (PortType) {
    PortType["net"] = "net";
    PortType["serialport"] = "serialport";
})(PortType = exports.PortType || (exports.PortType = {}));
var LocationEmptyCabinetProperty = /** @class */ (function () {
    function LocationEmptyCabinetProperty() {
    }
    return LocationEmptyCabinetProperty;
}());
exports.LocationEmptyCabinetProperty = LocationEmptyCabinetProperty;
function Dc(service, isDebugMode, isAesToStr) {
    if (isDebugMode === void 0) { isDebugMode = false; }
    if (isAesToStr === void 0) { isAesToStr = false; }
    return {
        content: new request_1.Request('/dc/content', service, isDebugMode, isAesToStr),
        province: new request_1.Request('/dc/province', service, isDebugMode, isAesToStr),
        city: new request_1.Request('/dc/city', service, isDebugMode, isAesToStr),
        area: new request_1.Request('/dc/area', service, isDebugMode, isAesToStr),
        village: new request_1.Request('/dc/village', service, isDebugMode, isAesToStr),
        building: new request_1.Request('/dc/building', service, isDebugMode, isAesToStr),
        family: new request_1.Request('/dc/family', service, isDebugMode, isAesToStr),
        // class
        location: new request_1.Request('/dc/location', service, isDebugMode, isAesToStr),
        group: new request_1.Request('/dc/group', service, isDebugMode, isAesToStr),
        company: new request_1.Request('/dc/company', service, isDebugMode, isAesToStr),
        department: new request_1.Request('/dc/department', service, isDebugMode, isAesToStr),
        device: new request_1.Request('/dc/device', service, isDebugMode, isAesToStr),
        team: new request_1.Request('/dc/team', service, isDebugMode, isAesToStr),
        charger: new request_1.Request('/dc/charger', service, isDebugMode, isAesToStr),
        ioAttr: new request_1.Request('/dc/ioAttr', service, isDebugMode, isAesToStr),
        io: new request_1.Request('/dc/io', service, isDebugMode, isAesToStr),
        io_type: new request_1.Request('/dc/io_type', service, isDebugMode, isAesToStr),
        cabinet: new request_1.Request('/dc/cabinet', service, isDebugMode, isAesToStr),
        drawer: new request_1.Request('/dc/drawer', service, isDebugMode, isAesToStr),
        verification: new request_1.Request('/dc/verification', service, isDebugMode, isAesToStr),
        android: new request_1.Request('/dc/androId', service, isDebugMode, isAesToStr),
        device_type: new request_1.Request('/dc/device_type', service, isDebugMode, isAesToStr),
        device_type_company: new request_1.Request('/dc/device_type_company', service, isDebugMode, isAesToStr),
        attributeName: new request_1.Request('/dc/attributeName', service, isDebugMode, isAesToStr),
        // function
        getVersion: function () { return request_1.mewRequest('/dc/select/version', {}, 'POST', service, isDebugMode, isAesToStr); },
        deviceSelectChange: function (json) { return request_1.mewRequest('/device/list_drawer_id/', json, 'GET', service, isDebugMode, isAesToStr); },
        // 代码逻辑过于乱即将废弃
        selectTeamBelong: function (json) { return request_1.mewRequest('/dc/team/belong/select', json, 'POST', service, isDebugMode, isAesToStr); },
        password: function (json) { return request_1.mewRequest('/dc/verification/password', json, 'POST', service, isDebugMode, isAesToStr); },
        getEmptyCabinet: function (json) { return request_1.mewRequest('/dc/location/get_empty_cabinet', json, 'POST', service, isDebugMode, isAesToStr); },
        findDeviceByAndroidId: function (json) { return request_1.mewRequest('/dc/device/find/androidId', json, 'POST', service, isDebugMode, isAesToStr); },
        findDeviceByUUID: function (json) { return request_1.mewRequest('/dc/device/select/uuid', json, 'POST', service, isDebugMode, isAesToStr); },
        genCabinetAndDrawerAndTool: function (json) { return request_1.mewRequest('/dc/drawer/genCabinetAndDrawerAndTool', json, 'POST', service, isDebugMode, isAesToStr); },
    };
}
exports.Dc = Dc;
