import {AuthData, Mc} from "../../src/ms/mc";
import axios from "axios";
import {AxiosEnv, Tc, Uc, Dc, mewMsPost} from "../../src/main";
import {Rfid, RfidSelectProperty, Tool, ToolSelectProperty, WorkOrderItem, WorkOrderSelectProperty} from "../../src/ms/tc";
import {
    Card,
    CardSelectProperty,
    DeviceUser,
    DeviceUserSelectProperty, User,
    UserSelectProperty,
    UserUpdateProperty
} from "../../src/ms/uc";
import {IResType} from "../../src/request";
import {Device, DeviceSelectProperty, DeviceType} from "../../src/ms/dc";
import * as _ from "lodash"

const baseURL = 'http://192.168.8.100:50200'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let tc
let uc
let dc

describe('测试rfid产品', () => {
    beforeEach(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        console.log(res)
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        tc = Tc(service)
        uc = Uc(service)
        dc = Dc(service)
    })

    // app前置验证测试用例
    test('device_user表字段类型验证', async () => {
        const deviceId = '052003001'
        const json: DeviceUserSelectProperty = {deviceId}
        const res = await uc.device_user.select(json) as IResType<DeviceUser>
        console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(1)
        // 验证所有子项内所有的数据符合非空
        for (const re of res.data) {
            // console.log(92,re)
            expect(re.deviceId).toBe(json.deviceId)
            expect(re.user).not.toBeNull()
            expect(re.device).not.toBeNull()
            expect(re.device.deviceTypeId).toBeGreaterThanOrEqual(1) //设备类型要存在
            expect(re.device.groupId).toBeGreaterThanOrEqual(1) //设备对应的groupId大于0
            expect(re.device.companyId).toBeGreaterThanOrEqual(1) //设备对应的companyId大于0
            expect(re.device.departmentId).toBeGreaterThanOrEqual(1) //设备对应的departmentId大于0
            // expect(re.group).not.toBeNull()
            // expect(re.lockId).not.toBeNull()
            // expect(re.lockIndex).toBeGreaterThanOrEqual(1)
        }
    }, 10000)

    // 将李亮的卡号插入数据库登录
    test('将李亮的卡号插入数据库登录', async () => {
        const deviceId = '232210002'
        const cardNo = '1852704769'
        const username = '李亮'
        const cardId = await makeSureCardNoIsExist(cardNo)
        const uid = await makeSureUserIsExist(deviceId,username,cardId)
        expect(uid).toBeGreaterThanOrEqual(1)
    }, 2000)

    // 将admin的卡号插入数据库登录
    test('将admin的卡号插入数据库登录', async () => {
        const deviceId = '232210002'
        const cardNo = '2882711915'
        const username = 'admin'
        const cardId = await makeSureCardNoIsExist(cardNo)
        const uid = await makeSureUserIsExist(deviceId,username,cardId)
        expect(uid).toBeGreaterThanOrEqual(1)
    }, 2000)
})

/**
 * 确保卡号存在，返回cardId
 * @param cardNo
 */
export async function makeSureCardNoIsExist(cardNo:string):Promise<number> {
    const json: CardSelectProperty = {cardNo};
    const res = await uc.card.select(json) as IResType<Card>
    if(res.data.length) {
        return res.data[0].id
    }else{
        const res = await uc.card.insert({cardNo})
        return res.data[0].id
    }
}

/**
 * 确保用户存在，返回uid
 * @param deviceId
 * @param username
 * @param cardId
 */
export async function makeSureUserIsExist(deviceId:string,username:string,cardId:number):Promise<number> {
    const res = await uc.user.select({username}) as IResType<User>
    let uid = 0
    if(res.data.length) {
        uid = res.data[0].id
    }else{
        const {groupId,companyId,departmentId,teamId} = await getDeviceOrgInfo(deviceId)
        const json: UserSelectProperty = {groupId,companyId,departmentId,teamId,username,cardId,status:true};
        const res = await uc.user.insert(json)
        uid = res.data[0].id
    }
    await uc.device_user.insert({deviceId,uid,roleId:3})
    return uid
}

/**
 * 获取{groupId,companyId,departmentId,teamId}
 * @param deviceId
 */
export async function getDeviceOrgInfo(deviceId:string):Promise<{groupId:number,companyId:number,departmentId:number,teamId:number}> {
    const res = await dc.device.select({deviceId}) as IResType<Device>
    const {groupId,companyId,departmentId,teamId} = res.data[0]
    return {groupId,companyId,departmentId,teamId}
}
