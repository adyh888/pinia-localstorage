import {AuthData, Mc} from "../../src/ms/mc";
import axios from "axios";
import {AxiosEnv, Tc, Uc, Dc, mewMsPost} from "../../src/main";
import {IResType} from "../../src/request";
import {Device, DeviceSelectProperty, DeviceType} from "../../src/ms/dc";
import * as _ from "lodash"

// 自定义条件
const baseURL = 'http://www.mew-iot.cn:50280'
const deviceId = '052003001'

//
let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let tc
let uc
let dc

describe('access', () => {
    beforeEach(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        console.log(res)
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        tc = Tc(service)
        uc = Uc(service)
        dc = Dc(service)
    })

    test('设备类型表存在设备对应的设备类型', async () => {
        const device_type_number:number = 25
        const json: DeviceSelectProperty = {id: deviceId};
        const res1 = await dc.device.find(json) as IResType<Device>
        expect(res1.code).toBe(0)
        expect(res1.msg).toBe('success')
        expect(res1.data.length).toBeGreaterThanOrEqual(1)
        const deviceTypeId = res1.data[0].deviceTypeId
        const res = await dc.device_type.select({}) as IResType<DeviceType>
        // console.log(res.data)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        // expect(res.data.length).toBeGreaterThanOrEqual(device_type_number)
        // expect(res.data)
        // 判断设备号对应的设备类型在数据库中存在
        expect(_.find(res.data, function(o) { return o.id == deviceTypeId })).not.toBeNull()
    }, 2000)

})

