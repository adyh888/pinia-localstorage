import {AuthData, Mc} from "../../src/ms/mc";
import axios from "axios";
import {AxiosEnv, Tc,Uc,Dc} from "../../src/main";
import {Rfid, RfidSelectProperty, Tool, ToolSelectProperty, WorkOrderItem, WorkOrderSelectProperty} from "../../src/ms/tc";
import {DeviceUser, DeviceUserSelectProperty} from "../../src/ms/uc";
import {IResType} from "../../src/request";
import {Device, DeviceSelectProperty, DeviceType} from "../../src/ms/dc";
import * as _ from "lodash"

const baseURL = 'http://172.16.10.95:50200'

let service = axios.create({
    baseURL ,
    // adapter: axiosAdapterUniapp as AxiosAdapter,
    timeout: 10000
})
let authData:AuthData
let tc
let uc
let dc

describe('tool_rfid', () => {
    beforeEach(async () => {
        const mc = Mc(service)
        const res = await mc.getAuth({username: 'admin', password: '111111'})
        authData = res.data
        const access_token = authData.access_token
        service = axios.create({
            baseURL,
            // adapter: axiosAdapterUniapp as AxiosAdapter,
            timeout: 10000,
            headers:{
                'Authorization': 'Bearer ' + access_token
            }
        })
        tc = Tc(service)
        uc = Uc(service)
        dc = Dc(service)
    })



    // app前置验证测试用例
    test('tool表字段类型验证', async () => {
        const terminalId:number = 15
        const deviceId = '052003001'
        const json: ToolSelectProperty = {deviceId,terminalId}
        const res = await tc.tool.select(json) as IResType<Tool>
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(1)
        expect(res.data[0].deviceId).toBe(json.deviceId)
        // 验证所有子项内所有的数据符合非空
        for (const re of res.data) {
            // console.log(235,re)
            expect(re.location).not.toBeNull()
            expect(re.group).not.toBeNull()
            expect(re.lockId).not.toBeNull()
            expect(re.lockIndex).toBeGreaterThanOrEqual(1)
        }
    }, 2000)

    test('rfid表字段类型验证', async () => {
        const deviceId = '052003001'
        const json: RfidSelectProperty = {deviceId}
        const res = await tc.rfid.select(json) as IResType<Rfid>
        // console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(1)
        expect(res.data[0].deviceId).toBe(json.deviceId)
        // 验证所有子项内所有的数据符合非空
        let item
        try {
            for (const re of res.data) {
                item = re
                expect(re.id).not.toBeNull()
                expect(re.toolId).not.toBeNull()
                expect(re.tool).not.toBeNull()
                expect(typeof re.tool).toBe('object')
                expect(typeof re.epc).toBe('string')
                expect(re.epc.length).toBe(24)
                // expect(re.tid.length).toBe(24)
                // expect(re.lockIndex).toBeGreaterThanOrEqual(1)
            }
        } catch (e) {
            console.log(68,item)
            throw e
        }

    }, 10000)

    // app前置验证测试用例
    test('device_user表字段类型验证', async () => {
        const deviceId = '052003001'
        const json: DeviceUserSelectProperty = {deviceId}
        const res = await uc.device_user.select(json) as IResType<DeviceUser>
        console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        expect(res.data.length).toBeGreaterThanOrEqual(1)
        // 验证所有子项内所有的数据符合非空
        for (const re of res.data) {
            // console.log(92,re)
            expect(re.deviceId).toBe(json.deviceId)
            expect(re.user).not.toBeNull()
            expect(re.device).not.toBeNull()
            expect(re.device.deviceTypeId).toBeGreaterThanOrEqual(1) //设备类型要存在
            expect(re.device.groupId).toBeGreaterThanOrEqual(1) //设备对应的groupId大于0
            expect(re.device.companyId).toBeGreaterThanOrEqual(1) //设备对应的companyId大于0
            expect(re.device.departmentId).toBeGreaterThanOrEqual(1) //设备对应的departmentId大于0
            // expect(re.group).not.toBeNull()
            // expect(re.lockId).not.toBeNull()
            // expect(re.lockIndex).toBeGreaterThanOrEqual(1)
        }
    }, 10000)

    test('设备类型表存在设备对应的设备类型', async () => {
        const device_type_number:number = 25
        const deviceId = '052003001'
        const json: DeviceSelectProperty = {id: deviceId};
        const res1 = await dc.device.find(json) as IResType<Device>
        expect(res1.code).toBe(0)
        expect(res1.msg).toBe('success')
        expect(res1.data.length).toBeGreaterThanOrEqual(1)
        const deviceTypeId = res1.data[0].deviceTypeId
        const res = await dc.device_type.select({}) as IResType<DeviceType>
        // console.log(res.data)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        // expect(res.data.length).toBeGreaterThanOrEqual(device_type_number)
        // expect(res.data)
        // 判断设备号对应的设备类型在数据库中存在
        expect(_.find(res.data, function(o) { return o.id == deviceTypeId })).not.toBeNull()
    }, 2000)

    test('工单详情', async () => {
        const deviceId = '052003001'
        const workorderId = 101
        const json: WorkOrderSelectProperty = {id:workorderId};
        const res = await tc.workorder_item.find(json) as IResType<WorkOrderItem>
        console.log(res)
        expect(res.code).toBe(0)
        expect(res.msg).toBe('success')
        // expect(res.data.length).toBeGreaterThanOrEqual(device_type_number)
        // expect(res.data)
    }, 2000)
})
